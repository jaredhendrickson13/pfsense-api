# Copyright 2022 Jared Hendrickson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Script used to test the /api/v1/access_token endpoint."""
import sys
import e2e_test_framework


class APIE2ETestAccessToken(e2e_test_framework.APIE2ETest):
    """Class used to test the /api/v1/access_token endpoint."""
    uri = "/api/v1/access_token"
    post_tests = [
        {
            "name": "Change auth mode to local to test token-based auth restriction",
            "uri": "/api/v1/system/api",
            "method": "PUT",
            "payload": {"authmode": "local"}
        },
        {
            "name": "Ensure clients cannot request token when auth mode is not jwt or token",
            "status": 403,
            "return": 9
        },
        {
            "name": "Change auth mode to jwt to test JWT authentication",
            "uri": "/api/v1/system/api",
            "method": "PUT",
            "payload": {"authmode": "jwt"}
        },
        {
            "name": "Test JWT authentication and change auth mode to token to test API Token authentication",
            "uri": "/api/v1/system/api",
            "method": "PUT",
            "payload": {"authmode": "token"}

        },
        {
            "name": "Request new API token to authenticate with",
            "payload": {"client-id": "admin", "client-token": "pfsense"}
        },
        {
            "name": "Test API token authentication and change authentication mode back to original value",
            "uri": "/api/v1/system/api",
            "method": "PUT"
            # Payload is generated by pre_post() method
        }
    ]

    def __init__(self):
        super().__init__()
        self.test_access_token_orig_auth_mode = None
        self.test_access_token_orig_username = None
        self.test_access_token_orig_password = None

    def pre_post(self):
        # Skip these tests if auth_mode was 'token' to begin. It will not work without knowing a username/password.
        if self.args.auth_mode == "token" and not self.post_responses:
            # Print a warning before exiting
            print(
                self.__format_msg__(
                    "POST",
                    {"name": "N/A"},
                    "Tests not available when 'auth_mode' is set to 'token' at start. Skipping!",
                    mode="warning"
                    )
                )
            sys.exit(0)

        # Save the original auth mode, username, password and change the test frameworks auth mode to local on test 1
        if len(self.post_responses) == 1:
            self.test_access_token_orig_auth_mode = self.args.auth_mode
            self.test_access_token_orig_username = self.args.username
            self.test_access_token_orig_password = self.args.password
            self.args.auth_mode = "local"
        # Ensure the framework is switched to jwt auth
        if len(self.post_responses) == 3:
            self.args.auth_mode = "jwt"
        # Ensure the framework is switched to token auth
        if len(self.post_responses) == 4:
            self.args.auth_mode = "token"
        # Revert the auth mode back to the original value
        if len(self.post_responses) == 5:
            self.post_tests[5]["payload"] = {"authmode": self.test_access_token_orig_auth_mode}

    def post_post(self):
        # Capture the API token created during tests
        if len(self.post_responses) == 5:
            self.args.username = self.post_responses[4]["data"]["client-id"]
            self.args.password = self.post_responses[4]["data"]["client-token"]
        # Revert the testing frameworks auth mode, username and password to original value after final test
        if len(self.post_responses) == 6:
            self.args.auth_mode = self.test_access_token_orig_auth_mode
            self.args.username = self.test_access_token_orig_username
            self.args.password = self.test_access_token_orig_password


APIE2ETestAccessToken()
